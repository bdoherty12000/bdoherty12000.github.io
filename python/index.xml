<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UpLrn</title>
    <link>https://www.uplrn.com/python/</link>
    <description>Recent content on UpLrn</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://www.uplrn.com/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link></link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid></guid>
      <description> Python  Introduction Variables and Types Numbers Lists Tuples Dictionaries Operators Loops Numpy Functions  HTML  Introduction  SQL  Introduction Select Update Delete  R  Get Started  About Blog  </description>
    </item>
    
    <item>
      <title>Introduction to Python</title>
      <link>https://www.uplrn.com/python/introduction-to-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/introduction-to-python/</guid>
      <description>Introduction What can Python do?  Python can be used on a server to create web applications. Python can be used alongside software to create workflows. Python can connect to database systems. It can also read and modify files. Python can be used to handle big data and perform complex mathematics. Python can be used for rapid prototyping, or for production-ready software development.  Python Python is a simple language with straightforward syntax.</description>
    </item>
    
    <item>
      <title>Introduction to Python</title>
      <link>https://www.uplrn.com/python/python-get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/python-get-started/</guid>
      <description>Introduction Python Python is a simple language with straightforward syntax. There are two major Python versions; Python 2 and Python 3. This tutorial uses Python 3 because it is the most up-to-date and supports newer features. For example, one difference between Python 2 and 3 is the print statement. In Python 2, the “print” statement is not a function, and therefore it is invoked without parentheses. However, in Python 3, it is a function and must be invoked with parentheses and also includes a newline, unlike in C.</description>
    </item>
    
    <item>
      <title>Loops in Python</title>
      <link>https://www.uplrn.com/python/python-loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/python-loops/</guid>
      <description> Loops in Python Python provides two ways of looping:
 while loops for loops  While Loops i = 1 while i &amp;lt; 6: print(i) i += 1  The Break Statement i = 1 while i &amp;lt; 6: print(i) if i == 3: break i += 1  The Continue Statement i = 0 while i &amp;lt; 6: i += 1 if i == 3: continue print(i)  The Else Statement i = 1 while i &amp;lt; 6: print(i) i += 1 else: print(&amp;quot;i is no longer less than 6&amp;quot;)  For Loops fruits = [&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;] for x in fruits: print(x)  The break Statement fruits = [&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;] for x in fruits: print(x) if x == &amp;quot;banana&amp;quot;: break  </description>
    </item>
    
    <item>
      <title>Numpy</title>
      <link>https://www.uplrn.com/python/python-numpy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/python-numpy/</guid>
      <description> Numpy What is Numpy? </description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>https://www.uplrn.com/python/python-operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/python-operators/</guid>
      <description> Operators </description>
    </item>
    
    <item>
      <title>Python Dictionaries</title>
      <link>https://www.uplrn.com/python/python-dictionaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/python-dictionaries/</guid>
      <description>Python Dictionaries A dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values.
Example Create and print a dictionary:
thisdict = { &amp;quot;brand&amp;quot;: &amp;quot;Ford&amp;quot;, &amp;quot;model&amp;quot;: &amp;quot;Mustang&amp;quot;, &amp;quot;year&amp;quot;: 1964 } print(thisdict)  Accessing Dictionary Items You can access the items of a dictionary by referring to its key name, inside square brackets:
Example Get the value of the &amp;ldquo;model&amp;rdquo; key:</description>
    </item>
    
    <item>
      <title>Python Functions</title>
      <link>https://www.uplrn.com/python/python-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/python-functions/</guid>
      <description> Python Functions You&amp;rsquo;ll learn how to use functions, methods, and packages to efficiently leverage the code that brilliant Python developers have written. The goal is to reduce the amount of code you need to solve challenging problems!
Functions </description>
    </item>
    
    <item>
      <title>Python Lists</title>
      <link>https://www.uplrn.com/python/python-lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/python-lists/</guid>
      <description>Python Lists Learn to store, access, and manipulate data in lists: the first step toward efficiently working with huge amounts of data.
What are lists? A list is a collection which is ordered and changeable. In Python lists are written with square brackets.
Create a list myList = [&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;orange&amp;quot;] # Assigning an integer value  Accessing List Items Accessing a Range of List Items Change Item Values Copying a List myList = [&amp;quot;apple&amp;quot;, &amp;quot;banana&amp;quot;, &amp;quot;cherry&amp;quot;] newList = myList.</description>
    </item>
    
    <item>
      <title>Python Numbers</title>
      <link>https://www.uplrn.com/python/python-numbers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/python-numbers/</guid>
      <description> Python Numbers </description>
    </item>
    
    <item>
      <title>Python Syntax</title>
      <link>https://www.uplrn.com/python/python-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/python-syntax/</guid>
      <description> Python Syntax </description>
    </item>
    
    <item>
      <title>Python Tuples</title>
      <link>https://www.uplrn.com/python/python-tuples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/python-tuples/</guid>
      <description>Python Tuples A Tuple is a collection which is ordered and unchangeable. Tuples are defined with round brackets:
myTuple = (&amp;quot;SQL&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;R&amp;quot;) print(myTuple)  Accessing Tuple Elements Indexing An element in a tuple can be accessed by referring to it&amp;rsquo;s index number, inside square brackets. The following prints the word &amp;ldquo;Python&amp;rdquo; which is the second element in the tuple:
myTuple = (&amp;quot;SQL&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;R&amp;quot;) print(myTuple[1])  Negative Indexing Negative indexing starts at the end of a tuple and indexes backwards towards the beginning.</description>
    </item>
    
    <item>
      <title>Variables and Types</title>
      <link>https://www.uplrn.com/python/python-variables-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.uplrn.com/python/python-variables-types/</guid>
      <description>Variables and Types Variables are reserved memory locations used to store values. Python has several basic data types that behave in ways that are similar to other programming languages. You do not need to declare variables before using them or declare their type. Every variable in Python is an object. Variables can hold any value and are case-sensitive. This tutorial will go over a few basic types of variables.</description>
    </item>
    
  </channel>
</rss>